#!/usr/bin/python

# Copyright 2014 Juliano Martinez
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#
# @author: Juliano Martinez (ncode)

import argparse
import datetime
import os
import re
import readline
import sys
import subprocess

from configparser import ConfigParser

from sqlalchemy import event, create_engine
from sqlalchemy import Column, DateTime, Integer, ForeignKey, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy.orm.exc import NoResultFound

config = ConfigParser()
home = os.getenv('HOME')
parser = argparse.ArgumentParser()
Base   = declarative_base()
config.read((
    lambda x: (x if x else '%s/.watched.cfg' % home 
               if os.path.isfile('%s/.watched.cfg' % home) 
               else None)
    )(os.getenv('WATCHED_CONF'))
)

def re_fn(expr, item):
    reg = re.compile(expr, re.I)
    return reg.search(item) is not None

def _fk_pragma_and_regex_on_connect(dbapi_con, con_record):
    dbapi_con.create_function('regexp', 2, re_fn)
    dbapi_con.execute('pragma foreign_keys=ON')

engine = create_engine(
    '%s:///%s' % ('sqlite', config.get('watched', 'database'))
)
event.listen(engine, 'connect', _fk_pragma_and_regex_on_connect)
Session = sessionmaker(bind=engine, autocommit=True, expire_on_commit=False)
session = Session()

class Watched(Base):
    __tablename__ = 'watched'

    id       = Column(Integer, primary_key=True)
    filename = Column(String)
    first    = Column(DateTime)
    last     = Column(DateTime)
    count    = Column(Integer)

    def __repr__(self):
        return ("Watched(filename[%s],lasttime[%s])" % (self.filename, self.last.ctime()))


def save(movie):
    now = datetime.datetime.now()
    session.begin(subtransactions=True)
    ss = check(movie)
    if ss:
        ss.last = now
        ss.count += 1
        session.commit()
        return

    try:
        session.add(
            Watched(filename=movie, first=now, last=now, count=1)
        )
        session.commit()
    except Exception as e:
        session.rollback()
        print("Problem %s updating data, try again" % e.__repr__())


def show():
    result = session.query(Watched).order_by(Watched.last.desc()).all()
    for line in result:
        print("first_time:[%s] last_time:[%s] count:[%s]\t %s" % (
                line.first.ctime(), line.last.ctime(),
                line.count, line.filename
             ))    


def find(pattern):
    result = session.query(Watched).filter(
        Watched.filename.op('regexp')(pattern)
    ).order_by(Watched.last.desc()).all()
    return result


def last(pattern=None):
    print(session.query(Watched).filter(
            Watched.filename.op('regexp')(pattern)
          ).order_by(Watched.last.desc()) if pattern else
          session.query(Watched).order_by(Watched.last.desc()).first())


def check(movie):
    return session.query(Watched).filter(
        Watched.filename==movie
    ).first()


def play(_file):
    subprocess.check_call('mplayer "%s"' % _file, shell=True)


def play_next(pattern):
    regex = re.compile(pattern)
    files = find(pattern)
    age 
    for root, dirs, files in os.walk(rpath, topdown=False):                 
        for name in files:                                                  
            _file = os.path.join(root, name)
            if regex.match(name):
                stat = os.path.stat(_file)


Base.metadata.create_all(engine)

if __name__ == '__main__':

    group = parser.add_mutually_exclusive_group()
    group.add_argument("movie", type=str, default="no_movie",
                       help="movie to be played by mplayer", nargs='?')
    group.add_argument("-f", "--find", type=str,
                       help="list watched files based on a given regex")
    group.add_argument("-s", "--show", action="store_true",
                       help="show all watched files")
    group.add_argument("-l", "--last", action="store_true",
                       help="show last file watched")

    args = parser.parse_args()

    try:
        if args.find:
            restult = find(args.find)
            for line in result:
                print("first_time:[%s] last_time:[%s] count:[%s]\t %s" %
                        line.first.ctime(), line.last.ctime(),
                        line.count, line.filename
                     )                   
        elif args.show:
            show()
        elif args.last:
            last()
        elif args.movie == "no_movie":
            parser.print_help()
        else:
            movie = os.path.basename(args.movie)
            if check(movie):
                print("You already whatched this file")
                ipt = input("Do you want to watch again? (y|n) ")
                if ipt != "y":
                    sys.exit(0)

            save(args.movie)
            subprocess.check_call('mplayer "%s"' % movie, shell=True)
    except NoResultFound:
        pass

    sys.exit(0)

